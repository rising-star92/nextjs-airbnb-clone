# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CheckUserValues {
  email: String!
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  equals: JSONObject
  not: JSONObject
}

type Listing {
  createdAt: DateTime!
  description: String!
  id: String!
  locationData: JSON!
  locationType: String!
  mapData: JSON!
  photos: JSON!
  placeAmeneites: JSON!
  placeSpace: JSON!
  placetype: String!
  price: Float!
  title: String!
  updatedAt: DateTime!
}

input ListingCreateInput {
  description: String!
  locationData: JSON!
  locationType: String!
  mapData: JSON!
  photos: JSON!
  placeAmeneites: JSON!
  placeSpace: JSON!
  placetype: String!
  price: Float!
  title: String!
}

input ListingOrderByInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  locationData: SortOrder
  locationType: SortOrder
  mapData: SortOrder
  photos: SortOrder
  placeAmeneites: SortOrder
  placeSpace: SortOrder
  placetype: SortOrder
  price: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input ListingUpdateInput {
  description: String
  locationData: JSON
  locationType: String
  mapData: JSON
  photos: JSON
  placeAmeneites: JSON
  placeSpace: JSON
  placetype: String
  price: Float
  title: String
}

input ListingWhereInput {
  description: StringFilter
  id: StringFilter
  locationData: JsonFilter
  locationType: StringFilter
  mapData: JsonFilter
  photos: JsonFilter
  placeAmeneites: JsonFilter
  placeSpace: JsonFilter
  placetype: StringFilter
  price: IntFilter
  title: StringFilter
}

input ListingWhereUniqueInput {
  id: String!
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createListing(data: ListingCreateInput!): Listing!
  createUser(data: UserCreateInput!): User!
  deleteListing(where: ListingWhereUniqueInput!): Listing!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  signup(credentials: Credentials!): UserInfo!
  updateListing(data: ListingUpdateInput!, where: ListingWhereUniqueInput!): Listing!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Query {
  _listingsMeta(where: ListingWhereInput): MetaQueryPayload!
  _usersMeta(where: UserWhereInput): MetaQueryPayload!
  checkUser(CheckUserValues: CheckUserValues!): User!
  listing(where: ListingWhereUniqueInput!): Listing
  listings(orderBy: [ListingOrderByInput!], skip: Float, take: Float, where: ListingWhereInput): [Listing!]!
  me: User!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: JSON!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  password: String!
  roles: JSON!
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  roles: JSON
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
